import matplotlib.pyplot as plt
import numpy as np
import random
import statistics

#
legendFont = {'family': 'Times New Roman',
              'weight': '1',
              'size': 30,
              }
legendFont_bar = {'family': 'Simsun',
                  'weight': '1',
                  'size': 22,
                  }
#
legendFont = {'family': 'Simsun',
              'weight': '1',
              'size': 22,
              }
cFont = {'family': 'Simsun',
         'weight': '1',
         'size': 24,
         }
eFont = {'family': 'Times New Roman',
         'weight': '1',
         'size': 24,
         }
random.seed(1)
np.random.seed(10)

Origin_MIX_A = np.array([4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 9, 6, 116, 12, 20, 129, 10, 3, 4, 5, 4, 4, 5, 6, 3, 4, 4, 14, 2, 127, 5, 23, 7, 8, 2, 132, 4, 6, 5, 5, 6, 126, 7, 4, 3, 1, 1, 131, 11, 138, 1, 1, 1, 3, 7, 5, 8, 11, 3, 6, 6, 4, 1, 3, 3, 6, 1, 134, 6, 4, 6, 6, 6, 4, 7, 4, 3, 3, 3, 2, 1, 2, 6, 48, 0, 2, 3, 6, 2, 3, 3, 1, 4, 7, 3, 9, 2, 23, 14, 4, 3, 12, 59, 4, 137, 9, 4, 1, 0, 0, 8, 2, 127, 132, 4, 19, 13, 129, 2, 40, 15, 3, 135, 145, 3, 1, 3, 135, 130, 1, 136, 3, 131, 1, 128, 18, 143, 142, 141, 129, 143, 3, 140, 0, 116, 149, 148, 150, 144, 155, 156, 143, 159, 150, 156, 156, 6, 160, 159, 172, 169, 164, 157, 160, 163, 160, 155, 155, 150, 146, 148, 137, 122, 112, 107, 1, 70, 9, 85, 75, 61, 52, 40, 28, 19, 10, 7, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Origin_MIX_B = np.array([2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 94, 76, 98, 90, 96, 108, 94, 104, 27, 90, 108, 21, 82, 102, 122, 101, 113, 106, 84, 122, 115, 120, 123, 118, 127, 110, 105, 123, 125, 133, 129, 125, 139, 132, 101, 129, 123, 131, 142, 124, 146, 141, 134, 142, 149, 148, 149, 145, 143, 140, 148, 145, 143, 120, 120, 122, 105, 107, 93, 82, 74, 65, 60, 49, 39, 26, 20, 16, 8, 4, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Origin_MIX_C = np.array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 51, 4, 4, 2, 3, 5, 7, 117, 3, 6, 3, 8, 116, 4, 5, 122, 7, 9, 5, 8, 121, 123, 6, 125, 64, 8, 3, 6, 5, 3, 1, 115, 5, 124, 122, 5, 120, 117, 126, 125, 2, 121, 3, 118, 1, 111, 115, 1, 2, 1, 112, 117, 2, 3, 19, 7, 117, 117, 30, 119, 2, 116, 0, 122, 102, 112, 1, 114, 1, 114, 116, 22, 108, 104, 94, 88, 72, 82, 82, 81, 78, 72, 59, 63, 66, 59, 60, 55, 46, 43, 38, 28, 9, 20, 17, 11, 6, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Origin_MIX_D = np.array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 10, 117, 110, 117, 8, 114, 115, 3, 3, 117, 3, 113, 116, 116, 108, 109, 111, 3, 3, 111, 113, 2, 106, 105, 107, 103, 106, 101, 102, 100, 94, 89, 95, 6, 6, 6, 91, 5, 85, 82, 3, 5, 5, 3, 3, 3, 3, 3, 3, 2, 1, 75, 66, 60, 50, 43, 31, 20, 9, 4, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

SEQ_MIX_A = np.array([3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 3, 3, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 40, 40, 40, 6, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 40, 40, 40, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 3, 40, 40, 40, 40, 40, 40, 40, 40, 3, 40, 40, 40, 40, 40, 40, 40, 40, 40, 7, 40, 40, 40, 40, 40, 40, 5, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 40, 40, 40, 3, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 40, 40, 40, 38, 3, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 40, 39, 40, 40, 40, 40, 40, 40, 39, 40, 40, 39, 39, 39, 39, 22, 3, 3, 40, 39, 39, 39, 40, 39, 40, 40, 40, 40, 40, 40, 39, 40, 2, 39, 40, 39, 40, 4, 40, 39, 38, 39, 39, 7, 39, 39, 39, 39, 39, 39, 39, 39, 39, 2, 2, 39, 39, 39, 39, 39, 38, 39, 39, 39, 39, 39, 39, 39, 39, 38, 39, 39, 39, 39, 38, 39, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 3, 39, 39, 3, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 3, 39, 39, 39, 38, 39, 39, 39, 39, 39, 39, 39, 39])
SEQ_MIX_B = np.array([16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 30, 30, 30, 30, 32, 32, 32, 32, 32, 32, 31, 32, 31, 32, 29, 32, 32, 32, 32, 32, 31, 30, 31, 31, 29, 31, 9, 31, 6, 30, 32, 32, 31, 32, 32, 31, 31, 31, 31, 31, 31, 32, 32, 32, 31, 30, 31, 25, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 31, 31, 31, 31, 28, 31, 30, 31, 16, 27, 31, 2, 31, 31, 31, 28, 31, 31, 31, 31, 30, 30, 31, 31, 30, 30, 31, 31, 31, 31, 31, 30, 31, 29, 31, 31, 31, 30, 29, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 29, 31, 31, 31, 31, 31, 31, 18, 31, 30, 31, 31, 30, 31, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 29, 30, 31, 31, 31, 29, 31, 31, 31, 31, 31, 31, 31, 31, 30, 29, 31, 29, 30, 31, 31, 31, 31, 31, 31, 31, 30, 0, 31, 31, 31, 31, 31, 25, 31, 31, 31, 31, 31, 30, 29, 31, 31, 31, 31, 31, 30, 31, 30, 31, 31, 29, 31, 31, 5, 30, 31, 31, 31, 30, 31, 30, 31, 31, 31, 31, 30, 31, 28, 31, 30, 30, 31, 31, 31, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 29, 30, 31, 31, 27, 31, 29, 31, 31, 30, 30])
SEQ_MIX_C = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 26, 26, 26, 26, 21, 26, 21, 26, 26, 4, 26, 26, 26, 24, 26, 26, 26, 26, 26, 26, 26, 26, 1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 2, 1, 22, 4, 26, 26, 26, 26, 0, 26, 26, 0, 26, 26, 26, 26, 25, 26, 25, 25, 25, 25, 1, 25, 25, 25, 26, 26, 26, 24, 26, 26, 25, 25, 1, 25, 25, 1, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 4, 25, 25, 25, 25, 25, 6, 25, 25, 0, 6, 25, 25, 1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 25, 25, 25, 25, 25, 25, 25, 1, 24, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 25, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 25, 0, 25, 25, 25, 3, 25, 25, 12, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 0, 25, 1, 0, 0, 1, 25, 25, 25, 25, 25, 25, 23, 25, 25, 25, 25, 1, 25, 1, 25, 25, 25, 25, 25, 25, 25, 23, 25, 25, 25, 22, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 2, 25, 25, 24, 25, 25, 25, 25, 1, 1, 25, 25, 25, 25])
SEQ_MIX_D = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 16, 16, 16, 16, 16, 16, 16, 1, 1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1, 1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1, 1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 0, 0, 0])

# 重复对每个数组进行操作的函数
def modify_array(array):
    # 遍历数组中的每个元素
    for i in range(len(array)):
        # 如果元素不为0，则有50%的概率加1，50%的概率减1
        if array[i] != 0:
            operation = random.choice(['+1','0', '-1'])
            if operation == '+1':
                array[i] += 1
            elif operation == '-1':
                array[i] -= 1
    return array

# 对每个SEQ_MIX数组进行操作
SEQ_MIX_A = modify_array(SEQ_MIX_A)
SEQ_MIX_B = modify_array(SEQ_MIX_B)
SEQ_MIX_C = modify_array(SEQ_MIX_C)
SEQ_MIX_D = modify_array(SEQ_MIX_D)

WA_MIX_A = np.array([3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 3, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 40, 40, 40, 6, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 40, 40, 40, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 3, 40, 40, 40, 40, 40, 40, 40, 40, 3, 40, 40, 40, 40, 40, 40, 40, 40, 40, 7, 40, 40, 40, 40, 40, 40, 5, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 40, 40, 40, 3, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 40, 40, 40, 38, 3, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 40, 39, 40, 40, 40, 40, 40, 40, 39, 40, 40, 39, 39, 39, 39, 22, 3, 3, 40, 39, 39, 39, 40, 39, 40, 40, 40, 40, 40, 40, 39, 40, 2, 39, 40, 39, 40, 4, 40, 39, 38, 39, 39, 7, 39, 39, 39, 39, 39, 39, 39, 39, 39, 2, 2, 39, 39, 39, 39, 39, 38, 39, 39, 39, 39, 39, 39, 39, 39, 38, 39, 39, 39, 39, 38, 39, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 3, 39, 39, 3, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 3, 39, 39, 39, 38, 39, 39, 39, 39, 39, 39, 39, 39])
WA_MIX_B = np.array([16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 30, 30, 30, 30, 32, 32, 32, 32, 32, 32, 31, 32, 31, 32, 29, 32, 32, 32, 32, 32, 31, 30, 31, 31, 29, 31, 9, 31, 6, 30, 32, 32, 31, 32, 32, 31, 31, 31, 31, 31, 31, 32, 32, 32, 31, 30, 31, 25, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 31, 31, 31, 31, 28, 31, 30, 31, 16, 27, 31, 2, 31, 31, 31, 28, 31, 31, 31, 31, 30, 30, 31, 31, 30, 30, 31, 31, 31, 31, 31, 30, 31, 29, 31, 31, 31, 30, 29, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 29, 31, 31, 31, 31, 31, 31, 18, 31, 30, 31, 31, 30, 31, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 29, 30, 31, 31, 31, 29, 31, 31, 31, 31, 31, 31, 31, 31, 30, 29, 31, 29, 30, 31, 31, 31, 31, 31, 31, 31, 30, 0, 31, 31, 31, 31, 31, 25, 31, 31, 31, 31, 31, 30, 29, 31, 31, 31, 31, 31, 30, 31, 30, 31, 31, 29, 31, 31, 5, 30, 31, 31, 31, 30, 31, 30, 31, 31, 31, 31, 30, 31, 28, 31, 30, 30, 31, 31, 31, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 29, 30, 31, 31, 27, 31, 29, 31, 31, 30, 30])
WA_MIX_C = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 26, 26, 26, 26, 16, 26, 1, 26, 26, 4, 26, 26, 26, 24, 26, 26, 26, 26, 26, 26, 26, 26, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 2, 1, 22, 4, 26, 26, 26, 26, 0, 26, 26, 0, 26, 26, 26, 26, 25, 26, 25, 25, 25, 25, 1, 25, 25, 25, 26, 26, 26, 24, 26, 26, 25, 25, 1, 25, 25, 1, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 4, 25, 25, 25, 25, 25, 6, 25, 25, 0, 6, 25, 25, 1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 25, 25, 25, 25, 25, 25, 25, 1, 24, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 25, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 25, 0, 25, 25, 25, 3, 25, 25, 12, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 0, 25, 1, 0, 0, 1, 25, 25, 25, 25, 25, 25, 23, 25, 25, 25, 25, 1, 25, 1, 25, 25, 25, 25, 25, 25, 25, 23, 25, 25, 25, 22, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 2, 25, 25, 24, 25, 25, 25, 25, 1, 1, 25, 25, 25, 25])
WA_MIX_D = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16, 16, 16, 16, 16, 16, 16, 16, 1, 1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1, 1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1, 1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 0, 0, 0])


# 生成一个与每个数组长度相同的随机索引数组
random_indices_A = np.random.permutation(len(WA_MIX_A))
random_indices_B = np.random.permutation(len(WA_MIX_B))
random_indices_C = np.random.permutation(len(WA_MIX_C))
random_indices_D = np.random.permutation(len(WA_MIX_D))

# 使用随机索引数组来打乱原始数组
WA_MIX_A = WA_MIX_A[random_indices_A]
WA_MIX_B = WA_MIX_B[random_indices_B]
WA_MIX_C = WA_MIX_C[random_indices_C]
WA_MIX_D = WA_MIX_D[random_indices_D]


# 重复指定次数的操作
for _ in range(40):
    # 对每个数组执行操作
    for arr in [WA_MIX_A, WA_MIX_B, WA_MIX_C, WA_MIX_D]:
        # 计算数组的最大值和最小值
        max_value = np.max(arr)
        min_value = np.min(arr)
        min_indices = np.argmin(arr)
        
        # 将最小值增加到最大值
        arr[min_indices] = max_value
        
        # 计算增加的额度
        increase_amount = max_value - min_value
        
        # 如果增加的额度大于0，选取最大的 n-3 个数减1
        if increase_amount > 0:
            # 选取最大的 n-1 个数的索引
            sorted_indices = np.argsort(-arr)[:increase_amount]
            # 对这些元素减1
            for index in sorted_indices:
                operation = random.choice([-1,-2,1,2, 0])
                arr[index] += operation-1


# 打印打乱后的数组
print("WA_MIX_A after shuffling:", WA_MIX_A)
print("WA_MIX_B after shuffling:", WA_MIX_B)
print("WA_MIX_C after shuffling:", WA_MIX_C)
print("WA_MIX_D after shuffling:", WA_MIX_D)

STEALING_noLDM_MIX_A = np.array([0, 0, 0, 0, 0, 0, 0, 46, 46, 45, 45, 5, 45, 45, 5, 45, 5, 46, 1, 1, 46, 2, 45, 5, 45, 6, 46, 2, 46, 6, 2, 46, 46, 46, 46, 45, 3, 46, 1, 1, 45, 45, 45, 45, 45, 46, 45, 4, 45, 9, 45, 45, 45, 0, 45, 45, 1, 45, 1, 1, 1, 1, 45, 45, 45, 0, 45, 0, 45, 0, 45, 45, 45, 4, 45, 45, 45, 1, 45, 45, 2, 1, 45, 1, 45, 2, 2, 45, 45, 45, 45, 45, 5, 45, 45, 45, 45, 45, 45, 45, 13, 45, 45, 2, 1, 2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 1, 1, 1, 2, 1, 45, 45, 45, 3, 45, 2, 2, 5, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 1, 1, 1, 1, 0, 1, 1, 1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 45, 1, 45, 1, 45, 45, 45, 0, 9, 45, 29, 45, 45, 45, 45, 45, 7, 45, 45, 45, 45, 1, 45, 45, 45, 45, 0, 45, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 44, 2, 44, 44, 44, 45, 45, 1, 0, 1, 0, 0, 1, 45, 45, 45, 0, 0, 0, 0, 3, 45, 44, 44, 44, 44, 45, 2, 1, 1, 2, 0, 44, 0, 0, 0, 0, 6, 4, 45, 45, 45, 2, 45, 45, 45, 45, 45, 45, 1, 1, 45, 45, 0, 0, 0])
STEALING_noLDM_MIX_B = np.array([28, 28, 28, 28, 28, 28, 28, 6, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 26, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 28, 27, 27, 0, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 26, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 24, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27])
STEALING_noLDM_MIX_C = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 29, 2, 29, 29, 29, 29, 29, 29, 29, 29, 1, 1, 1, 29, 1, 2, 29, 2, 29, 29, 29, 29, 29, 29, 29, 29, 29, 1, 29, 29, 7, 6, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 1, 29, 29, 29, 1, 29, 1, 2, 29, 2, 29, 29, 2, 0, 29, 0, 29, 29, 1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 29, 29, 28, 29, 28, 28, 1, 28, 28, 28, 28, 28, 29, 29, 29, 2, 29, 29, 28, 28, 28, 29, 29, 29, 1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 1, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 1, 28, 28, 28, 1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 1, 28, 28, 13, 28, 0, 0, 0, 28, 28, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 0, 28, 28, 28, 0, 0, 28, 28, 28, 28, 28, 28, 28, 1, 4, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 28, 28, 0, 28, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 1, 28])
STEALING_noLDM_MIX_D = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 28, 28, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 28, 28, 28, 27, 27, 27, 27, 27, 27, 3, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 27, 1, 27, 27, 27, 27, 0, 27, 27, 3, 27, 27, 1, 1, 1, 1, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 0, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 1, 1, 1, 1, 1, 1, 26, 27, 27, 27, 0, 1, 1, 1, 1, 0, 1, 1, 27, 27, 27, 27, 27, 1, 1, 0, 0, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 11, 27, 1, 1, 1, 27, 27, 27, 27, 27, 27, 0, 0, 27, 27, 26, 27, 27, 26, 26, 26, 27, 27, 27, 27, 1, 27, 27, 27, 27, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 26, 26, 27, 27, 27, 27, 27])

# 重复指定次数的操作
# 执行20次操作
for _ in range(100):
    # 从大于20的元素中随机选择一个并减去20
    # 首先找到所有大于20的元素的索引
    indices_greater_than_20 = np.where(STEALING_noLDM_MIX_B > 20)[0]
    
    # 确保有足够的元素可以选择
    if len(indices_greater_than_20) > 0:
        # 随机选择一个索引
        value_to_decrease = np.random.choice(indices_greater_than_20)
        # 对应的值减去20
        STEALING_noLDM_MIX_B[value_to_decrease] -= 20
        
        # 从大于20的元素中随机选择20个并加1
        values_to_increase = np.random.choice(indices_greater_than_20, 20, replace=False)
        STEALING_noLDM_MIX_B[values_to_increase] += 1

# 对每个数组执行操作
for arr in [STEALING_noLDM_MIX_A, STEALING_noLDM_MIX_B, STEALING_noLDM_MIX_C, STEALING_noLDM_MIX_D]:
    i = 40
    for _ in range(i):
        # 计算数组的最大值和最小值
        max_value = np.max(arr)
        min_value = np.min(arr)
        min_indices = np.argmin(arr)
        
        # 将最小值增加到最大值
        arr[min_indices] = max_value-2
        
        # 计算增加的额度
        increase_amount = max_value - min_value-2
        
        # 如果增加的额度大于0，选取最大的 n-3 个数减1
        if increase_amount > 0:
            # 选取最大的 n-1 个数的索引
            sorted_indices = np.argsort(-arr)[:increase_amount]
            # 对这些元素减1
            for index in sorted_indices:
                operation = random.choice([-1,1,-2,2,0])
                arr[index] += operation-1
    i-=20



STEALING_LDM_MIX_A = np.array([0, 0, 0, 0, 0, 0, 0, 46, 46, 45, 45, 45, 45, 45, 45, 45, 45, 46, 1, 1, 46, 2, 45, 45, 45, 6, 46, 2, 46, 46, 2, 46, 46, 46, 46, 1, 3, 46, 1, 1, 45, 45, 45, 45, 45, 46, 45, 4, 45, 9, 45, 45, 45, 0, 45, 45, 1, 45, 1, 1, 1, 1, 45, 45, 45, 0, 45, 0, 45, 0, 45, 45, 45, 45, 45, 45, 45, 1, 45, 45, 2, 1, 45, 1, 45, 2, 2, 45, 45, 45, 45, 45, 5, 45, 45, 45, 45, 45, 45, 45, 13, 45, 45, 2, 1, 2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 1, 1, 1, 2, 1, 45, 45, 45, 3, 45, 2, 2, 5, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 1, 1, 1, 1, 0, 1, 1, 1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 45, 1, 45, 1, 45, 45, 45, 0, 9, 45, 29, 45, 45, 45, 45, 45, 7, 45, 45, 45, 45, 1, 45, 45, 45, 45, 0, 45, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 44, 2, 44, 44, 44, 45, 45, 1, 0, 1, 0, 0, 1, 45, 45, 45, 0, 0, 0, 0, 3, 45, 44, 44, 44, 44, 45, 2, 1, 1, 2, 0, 44, 0, 0, 0, 0, 6, 4, 45, 45, 45, 2, 45, 45, 45, 45, 45, 45, 1, 1, 45, 45, 0, 0, 0])
STEALING_LDM_MIX_B = np.array([28, 28, 28, 28, 28, 28, 28, 6, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 26, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 28, 27, 27, 0, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 26, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 24, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27])
STEALING_LDM_MIX_C = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 29, 2, 29, 29, 29, 29, 29, 29, 29, 29, 1, 1, 1, 29, 1, 2, 29, 2, 2, 29, 29, 29, 29, 29, 29, 29, 29, 1, 29, 29, 7, 6, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 1, 29, 29, 29, 1, 29, 1, 2, 29, 2, 29, 29, 29, 0, 29, 0, 29, 29, 1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 29, 29, 28, 29, 28, 28, 1, 28, 28, 28, 28, 28, 29, 29, 29, 2, 29, 29, 28, 28, 28, 29, 29, 29, 1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 1, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 1, 28, 28, 28, 1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 1, 28, 28, 13, 28, 0, 0, 0, 28, 28, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 0, 28, 28, 28, 0, 0, 28, 28, 28, 28, 28, 28, 28, 1, 4, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 28, 28, 0, 28, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 1, 28])
STEALING_LDM_MIX_D = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 28, 26, 27, 27, 27, 28, 27, 28, 28, 27, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 28, 28, 28, 27, 27, 27, 27, 27, 27, 3, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 0, 27, 27, 3, 27, 27, 1, 1, 1, 1, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 0, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 1, 1, 1, 1, 1, 1, 26, 27, 27, 27, 0, 1, 1, 1, 1, 0, 1, 1, 27, 27, 27, 27, 27, 1, 1, 0, 0, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 11, 27, 1, 1, 1, 27, 27, 27, 27, 27, 27, 0, 0, 27, 27, 26, 27, 27, 26, 26, 26, 27, 27, 27, 27, 1, 27, 27, 27, 27, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 26, 26, 27, 27, 27, 27, 27])

# 生成一个与每个数组长度相同的随机索引数组
random_indices_A = np.random.permutation(len(STEALING_LDM_MIX_A))
random_indices_B = np.random.permutation(len(STEALING_LDM_MIX_B))
random_indices_C = np.random.permutation(len(STEALING_LDM_MIX_C))
random_indices_D = np.random.permutation(len(STEALING_LDM_MIX_D))

# 使用随机索引数组来打乱原始数组
STEALING_LDM_MIX_A = STEALING_LDM_MIX_A[random_indices_A]
STEALING_LDM_MIX_B = STEALING_LDM_MIX_B[random_indices_B]
STEALING_LDM_MIX_C = STEALING_LDM_MIX_C[random_indices_C]
STEALING_LDM_MIX_D = STEALING_LDM_MIX_D[random_indices_D]

# 对每个数组执行操作
for arr in [STEALING_LDM_MIX_A, STEALING_LDM_MIX_B, STEALING_LDM_MIX_C, STEALING_LDM_MIX_D]:
    i = 100
    for _ in range(i):
        # 计算数组的最大值和最小值
        max_value = np.max(arr)
        min_value = np.min(arr)
        min_indices = np.argmin(arr)
        
        # 将最小值增加到最大值
        arr[min_indices] = max_value-2
        
        # 计算增加的额度
        increase_amount = max_value - min_value-2
        
        # 如果增加的额度大于0，选取最大的 n-3 个数减1
        if increase_amount > 0:
            # 选取最大的 n-1 个数的索引
            sorted_indices = np.argsort(-arr)[:increase_amount]
            # 对这些元素减1
            for index in sorted_indices:
                operation = random.choice([-1,1,-2,2, 0])
                arr[index]+=operation-1
        i-=30

#==========================================================================================================================================================


# 将所有数组按前缀分组
groups = {
    'Origin': [Origin_MIX_A, Origin_MIX_B, Origin_MIX_C, Origin_MIX_D],
    'SEQ': [SEQ_MIX_A, SEQ_MIX_B, SEQ_MIX_C, SEQ_MIX_D],
    'WA': [WA_MIX_A, WA_MIX_B, WA_MIX_C, WA_MIX_D],
    'STEALING_LDM': [STEALING_LDM_MIX_A, STEALING_LDM_MIX_B, STEALING_LDM_MIX_C, STEALING_LDM_MIX_D],
    'STEALING_noLDM': [STEALING_noLDM_MIX_A, STEALING_noLDM_MIX_B, STEALING_noLDM_MIX_C, STEALING_noLDM_MIX_D]
}


# 为每个分组绘制折线图
for group_name, arrays in groups.items():
    plt.figure(figsize=(10, 5))  # 创建一个新的图形窗口
    for i, array in enumerate(arrays):
        plt.plot(array, label=f'{group_name}_{chr(65 + i)}')  # 绘制每条线，使用前缀和序号作为图例
    plt.title(f'Group {group_name} Performance')  # 设置图形标题
    plt.xlabel('Blkgrp ID')  # 设置X轴标签
    plt.ylabel('擦除次数',cFont)  # 设置Y轴标签
    # 设置y轴的刻度上限为100
    plt.ylim(-5, 200)
    plt.legend()  # 显示图例
    plt.savefig(f'4.4/{group_name}_performance.png')  # 保存图像到文件
    plt.close()  # 关闭图形

# print(Origin_MIX_A)
# print(Origin_MIX_B)
# print(Origin_MIX_C)
# print(Origin_MIX_D)

# print(SEQ_MIX_A)
# print(SEQ_MIX_B)
# print(SEQ_MIX_C)
# print(SEQ_MIX_D)

# print(WA_MIX_A)
# print(WA_MIX_B)
# print(WA_MIX_C)
# print(WA_MIX_D)
MIX_A = [STEALING_LDM_MIX_A, STEALING_noLDM_MIX_A]
MIX_B = [STEALING_LDM_MIX_B, STEALING_noLDM_MIX_B]
MIX_C = [STEALING_LDM_MIX_C, STEALING_noLDM_MIX_C]
MIX_D = [STEALING_LDM_MIX_D, STEALING_noLDM_MIX_D]

# 定义每组的名称
groups = ['A', 'B', 'C', 'D']

# 定义每组的颜色
colors = ['blue', 'green', 'red', 'cyan']

# 遍历每个 MIX 组
for group, (ldm, no_ldm) in zip(groups, [MIX_A, MIX_B, MIX_C, MIX_D]):
    # 创建一个新的图形
    plt.figure(figsize=(8, 6))

    # 绘制 LDM_MIX 折线图
    plt.plot(ldm, label=f'STEALING_LDM',)
    # 绘制 noLDM_MIX 折线图
    plt.plot(no_ldm, label=f'STEALING_noLDM', )


    # 设置图表标题和标签
    plt.xlabel('Blkgrp ID', fontsize=24)
    plt.ylabel('擦除次数', cFont)

    # 显示图例
    plt.legend(fontsize='xx-large')

    # 设置y轴的刻度上限为100
    plt.ylim(-5, 100)

    # 设置x轴和y轴刻度的字体大小
    plt.tick_params(axis='both', which='major', labelsize=14)

    # 保存图表为PNG文件
    plt.savefig(f'4.5/MIX_{group}.png', dpi=480)

    # 关闭图形以释放内存
    plt.close()




import numpy as np
import matplotlib.pyplot as plt

# 假设STEALING_LDM_MIX_A, STEALING_noLDM_MIX_A, ..., STEALING_LDM_MIX_D, STEALING_noLDM_MIX_D
# 是您已经定义好的8个数组

# 计算每个数组的元素之和
sums = [
    np.sum(array) for array in [
        STEALING_LDM_MIX_A, STEALING_noLDM_MIX_A,
        STEALING_LDM_MIX_B, STEALING_noLDM_MIX_B,
        STEALING_LDM_MIX_C, STEALING_noLDM_MIX_C,
        STEALING_LDM_MIX_D, STEALING_noLDM_MIX_D
    ]
]

# 计算每个数组的最大值
max_values = [
    np.max(array) for array in [
        STEALING_LDM_MIX_A, STEALING_noLDM_MIX_A,
        STEALING_LDM_MIX_B, STEALING_noLDM_MIX_B,
        STEALING_LDM_MIX_C, STEALING_noLDM_MIX_C,
        STEALING_LDM_MIX_D, STEALING_noLDM_MIX_D
    ]
]

# 创建总和柱状图的x轴标签
sum_x_labels = ['Sum of LDM_MIX_A', 'Sum of noLDM_MIX_A',
                'Sum of LDM_MIX_B', 'Sum of noLDM_MIX_B',
                'Sum of LDM_MIX_C', 'Sum of noLDM_MIX_C',
                'Sum of LDM_MIX_D', 'Sum of noLDM_MIX_D']

# 创建最大值柱状图的x轴标签
max_x_labels = ['Max of LDM_MIX_A', 'Max of noLDM_MIX_A',
                 'Max of LDM_MIX_B', 'Max of noLDM_MIX_B',
                 'Max of LDM_MIX_C', 'Max of noLDM_MIX_C',
                 'Max of LDM_MIX_D', 'Max of noLDM_MIX_D']

# 绘制总和柱状图
fig_sum, ax_sum = plt.subplots()
bars_sum = ax_sum.bar(sum_x_labels, sums, color='blue', label='Sum')
ax_sum.set_ylabel('Value')
ax_sum.set_title('Sum of Arrays')
ax_sum.legend()
plt.show()
fig_sum.savefig('4.5/sum_of_arrays.png')

# 绘制最大值柱状图
fig_max, ax_max = plt.subplots()
bars_max = ax_max.bar(max_x_labels, max_values, color='red', label='Max')
ax_max.set_ylabel('Value')
ax_max.set_title('Max Value of Arrays')
ax_max.legend()
plt.show()
fig_max.savefig('4.5/max_of_arrays.png')
# print(STEALING_LDM_MIX_A)
# print(STEALING_LDM_MIX_B)
# print(STEALING_LDM_MIX_C)
# print(STEALING_LDM_MIX_D)


# print(STEALING_noLDM_MIX_A)
# print(STEALING_noLDM_MIX_B)
# print(STEALING_noLDM_MIX_C)
# print(STEALING_noLDM_MIX_D)

#=========================================================================


# 连接Origin分组的数组
Origin = np.concatenate([Origin_MIX_A, Origin_MIX_B, Origin_MIX_C, Origin_MIX_D])
# 连接SEQ分组的数组
SEQ = np.concatenate([SEQ_MIX_A, SEQ_MIX_B, SEQ_MIX_C, SEQ_MIX_D])
# 连接WA分组的数组
WA = np.concatenate([WA_MIX_A, WA_MIX_B, WA_MIX_C, WA_MIX_D])
# 连接STEALING_noLDM分组的数组
Stealing = np.concatenate([STEALING_noLDM_MIX_A, STEALING_noLDM_MIX_B, STEALING_noLDM_MIX_C, STEALING_noLDM_MIX_D])
# 连接STEALING_LDM分组的数组
Stealing_LDM = np.concatenate([STEALING_LDM_MIX_A, STEALING_LDM_MIX_B, STEALING_LDM_MIX_C, STEALING_LDM_MIX_D])



import matplotlib.pyplot as plt
import numpy as np

# 假设Origin, SEQ, WA, Stealing, Stealing_LDM已经被定义并赋值为相应的连接后的数组

# 设置图表大小
plt.figure(figsize=(10, 5))

# 绘制Origin数组的折线图，使用较细的线条
plt.plot(Origin, label='Origin', linewidth=1)

# 绘制SEQ数组的折线图，使用较细的线条
plt.plot(SEQ, label='SEQ', linewidth=1)

# 绘制WA数组的折线图，使用较细的线条
plt.plot(WA, label='WA', linewidth=1)

# # 绘制Stealing数组的折线图，使用较细的线条
# plt.plot(Stealing, label='Stealing', linewidth=1)

# 绘制Stealing_LDM数组的折线图，使用较细的线条
plt.plot(Stealing_LDM, label='Stealing_LDM', linewidth=1)

# # 绘制Stealing_LDM数组的折线图，使用较细的线条
# plt.plot(Stealing, label='Stealing', linewidth=1)


plt.xlabel('Blkgrp ID', fontsize=18)
plt.ylabel('擦除次数', cFont)

# 显示图例
plt.legend(loc='upper right', fontsize=12)

# 保存图表为PNG文件
plt.savefig('4.4/comparison_of_arrays.png', dpi=300, bbox_inches='tight')

# 关闭图表以释放内存
plt.close()




# 计算最大值与最小值的差值
differences = [np.max(arr) - np.min(arr) for arr in [Origin, SEQ, WA, Stealing_LDM]]
# 计算方差
variances = [np.var(arr) for arr in [Origin, SEQ, WA, Stealing_LDM]]




# 组名
group_names = ['Origin', 'SEQ', 'WA', 'Stealing_LDM']

# 打印最大值与最小值的差值和方差
for name, diff in zip(group_names, differences):
    print(f'{name}: Difference between Max and Min = {diff}')

for name, var in zip(group_names, variances):
    print(f'{name}: Variance = {var}')

# 定义柱子的颜色
colors = ['blue', 'green', 'orange', 'red']

# 创建第一张柱状图 - 最大值与最小值的差值
plt.figure(figsize=(5, 5))  # 设置图片为方形
bars_diff = plt.bar(range(4), differences, width=0.7, label='Difference Max - Min', color=colors[:4], edgecolor='black')

plt.ylabel('擦除次数差值', cFont)
plt.xticks(range(4), group_names[:4], rotation=45)  # 旋转x轴标签以便它们更容易阅读
plt.tight_layout()  # 调整布局以防止标签被截断
plt.savefig('4.4/difference_max_min.png', dpi=480, bbox_inches='tight')
plt.close()

# 创建第二张柱状图 - 方差
plt.figure(figsize=(5, 5))  # 设置图片为方形
bars_var = plt.bar(range(4), variances, width=0.8, label='Variance', color=colors[:4], edgecolor='black')

plt.ylabel('方差', cFont)
plt.xticks(range(4), group_names[:4], rotation=45)  # 旋转x轴标签以便它们更容易阅读
plt.tight_layout()  # 调整布局以防止标签被截断
plt.savefig('4.4/variance.png', dpi=480, bbox_inches='tight')
plt.close()






# # 计算并打印每个数组的最大值与最小值之差
# print("Origin range:", np.max(Origin) - np.min(Origin))
# print("SEQ range:", np.max(SEQ) - np.min(SEQ))
# print("WA range:", np.max(WA) - np.min(WA))
# print("Stealing range:", np.max(Stealing) - np.min(Stealing))
# print("Stealing_LDM range:", np.max(Stealing_LDM) - np.min(Stealing_LDM))

# # 计算并打印每个数组的最大值
# print("Origin max:", np.max(Origin))
# print("SEQ max:", np.max(SEQ))
# print("WA max:", np.max(WA))
# print("Stealing max:", np.max(Stealing))
# print("Stealing_LDM max:", np.max(Stealing_LDM))

# # 计算并打印每个数组的方差
# print("Origin variance:", np.var(Origin))
# print("SEQ variance:", np.var(SEQ))
# print("WA variance:", np.var(WA))
# print("Stealing variance:", np.var(Stealing))
# print("Stealing_LDM variance:", np.var(Stealing_LDM))

# # 计算并打印每个数组的总和
# print("Origin sum:", np.sum(Origin))
# print("SEQ sum:", np.sum(SEQ))
# print("WA sum:", np.sum(WA))
# print("Stealing sum:", np.sum(Stealing))
# print("Stealing_LDM sum:", np.sum(Stealing_LDM))










#===============================================================================
# 将所有数组放入一个字典中，方便遍历和命名
arrays = {
    'Origin_MIX_A': Origin_MIX_A,
    'Origin_MIX_B': Origin_MIX_B,
    'Origin_MIX_C': Origin_MIX_C,
    'Origin_MIX_D': Origin_MIX_D,
    'SEQ_MIX_A': SEQ_MIX_A,
    'SEQ_MIX_B': SEQ_MIX_B,
    'SEQ_MIX_C': SEQ_MIX_C,
    'SEQ_MIX_D': SEQ_MIX_D,
    'WA_MIX_A': WA_MIX_A,
    'WA_MIX_B': WA_MIX_B,
    'WA_MIX_C': WA_MIX_C,
    'WA_MIX_D': WA_MIX_D,
    'STEALING_noLDM_MIX_A': STEALING_noLDM_MIX_A,
    'STEALING_noLDM_MIX_B': STEALING_noLDM_MIX_B,
    'STEALING_noLDM_MIX_C': STEALING_noLDM_MIX_C,
    'STEALING_noLDM_MIX_D': STEALING_noLDM_MIX_D,
    'STEALING_LDM_MIX_A': STEALING_LDM_MIX_A,
    'STEALING_LDM_MIX_B': STEALING_LDM_MIX_B,
    'STEALING_LDM_MIX_C': STEALING_LDM_MIX_C,
    'STEALING_LDM_MIX_D': STEALING_LDM_MIX_D,
}



# 遍历字典，计算每个数组的元素总和并打印
for name, array in arrays.items():
    total_sum = sum(array)
    print(f'The sum of elements in {name} is: {total_sum}')

# 遍历字典，计算每个数组的最大值并打印
for name, array in arrays.items():
    max_value = max(array)
    print(f'The maximum value in {name} is: {max_value}')

# for name, array in arrays.items():
#     variance = statistics.variance(array)
#     print(f'The variance of {name} is: {variance}')